// Code generated by goa v3.11.1, DO NOT EDIT.
//
// car HTTP server types
//
// Command:
// $ goa gen
// vehicle-sharing-go/internal/inventory/vehicle/infrastructure/controller/design
// -o internal/inventory/vehicle/infrastructure/controller

package server

import (
	goa "goa.design/goa/v3/pkg"

	"vehicle-sharing-go/app/inventory/internal/vehicle/handler/gen/car"
	carviews "vehicle-sharing-go/app/inventory/internal/vehicle/handler/gen/car/views"
)

// CreateRequestBody is the type of the "car" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Car id in uuid format
	ID  *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Vin *string `form:"vin,omitempty" json:"vin,omitempty" xml:"vin,omitempty"`
	// Car color
	Color *string `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
}

// GetOKResponseBody is the type of the "car" service "get" endpoint HTTP
// response body.
type GetOKResponseBody struct {
	ID        string               `form:"id" json:"id" xml:"id"`
	CreatedAt string               `form:"createdAt" json:"createdAt" xml:"createdAt"`
	UpdatedAt string               `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Color     string               `form:"color" json:"color" xml:"color"`
	VinData   *VinDataResponseBody `form:"vinData" json:"vinData" xml:"vinData"`
}

// CreateConflictResponseBody is the type of the "car" service "create"
// endpoint HTTP response body for the "conflict" error.
type CreateConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInternalResponseBody is the type of the "car" service "create"
// endpoint HTTP response body for the "internal" error.
type CreateInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "car" service "get" endpoint HTTP
// response body for the "notFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInternalResponseBody is the type of the "car" service "get" endpoint HTTP
// response body for the "internal" error.
type GetInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VinDataResponseBody is used to define fields on response body types.
type VinDataResponseBody struct {
	Vin           string  `form:"vin" json:"vin" xml:"vin"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Manufacturer  *string `form:"manufacturer,omitempty" json:"manufacturer,omitempty" xml:"manufacturer,omitempty"`
	Brand         *string `form:"brand,omitempty" json:"brand,omitempty" xml:"brand,omitempty"`
	EngineSize    *string `form:"engineSize,omitempty" json:"engineSize,omitempty" xml:"engineSize,omitempty"`
	FuelType      *string `form:"fuelType,omitempty" json:"fuelType,omitempty" xml:"fuelType,omitempty"`
	Model         *string `form:"model,omitempty" json:"model,omitempty" xml:"model,omitempty"`
	Year          *string `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
	AssemblyPlant *string `form:"assemblyPlant,omitempty" json:"assemblyPlant,omitempty" xml:"assemblyPlant,omitempty"`
	SN            *string `form:"SN,omitempty" json:"SN,omitempty" xml:"SN,omitempty"`
}

// NewGetOKResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "car" service.
func NewGetOKResponseBody(res *carviews.CarResourceView) *GetOKResponseBody {
	body := &GetOKResponseBody{
		ID:        *res.ID,
		CreatedAt: *res.CreatedAt,
		UpdatedAt: *res.UpdatedAt,
		Color:     *res.Color,
	}
	if res.VinData != nil {
		body.VinData = marshalCarviewsVinDataViewToVinDataResponseBody(res.VinData)
	}
	return body
}

// NewCreateConflictResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "car" service.
func NewCreateConflictResponseBody(res *goa.ServiceError) *CreateConflictResponseBody {
	body := &CreateConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInternalResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "car" service.
func NewCreateInternalResponseBody(res *goa.ServiceError) *CreateInternalResponseBody {
	body := &CreateInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "car" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInternalResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "car" service.
func NewGetInternalResponseBody(res *goa.ServiceError) *GetInternalResponseBody {
	body := &GetInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePayload builds a car service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *car.CreatePayload {
	v := &car.CreatePayload{
		ID:    *body.ID,
		Vin:   car.Vin(*body.Vin),
		Color: *body.Color,
	}

	return v
}

// NewGetPayload builds a car service get endpoint payload.
func NewGetPayload(id string) *car.GetPayload {
	v := &car.GetPayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Vin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("vin", "body"))
	}
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}
