// Code generated by goa v3.11.1, DO NOT EDIT.
//
// car HTTP client CLI support package
//
// Command:
// $ goa gen
// vehicle-sharing-go/internal/inventory/vehicle/infrastructure/controller/design
// -o internal/inventory/vehicle/infrastructure/controller

package client

import (
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"

	"vehicle-sharing-go/app/inventory/internal/vehicle/handler/gen/car"
)

// BuildCreatePayload builds the payload for the car create endpoint from CLI
// flags.
func BuildCreatePayload(carCreateBody string) (*car.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(carCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"color\": \"Nihil aperiam tempore dolor aut recusandae.\",\n      \"id\": \"c2dfea5c-9040-11ee-ae47-9a5c7f2ee299\",\n      \"vin\": \"Optio repellat fuga quas.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &car.CreatePayload{
		ID:    body.ID,
		Vin:   car.Vin(body.Vin),
		Color: body.Color,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the car get endpoint from CLI flags.
func BuildGetPayload(carGetID string) (*car.GetPayload, error) {
	var err error
	var id string
	{
		id = carGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &car.GetPayload{}
	v.ID = id

	return v, nil
}
