// Code generated by goa v3.11.1, DO NOT EDIT.
//
// car HTTP client encoders and decoders
//
// Command:
// $ goa gen
// vehicle-sharing-go/internal/inventory/vehicle/infrastructure/controller/design
// -o internal/inventory/vehicle/infrastructure/controller

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"

	"vehicle-sharing-go/internal/inventory/vehicle/handler/gen/car"
	carviews "vehicle-sharing-go/internal/inventory/vehicle/handler/gen/car/views"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "car" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCarPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("car", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the car create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*car.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("car", "create", "*car.CreatePayload", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("car", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the car
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "conflict" (type *goa.ServiceError): http.StatusConflict
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusConflict:
			var (
				body CreateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("car", "create", err)
			}
			err = ValidateCreateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("car", "create", err)
			}
			return nil, NewCreateConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("car", "create", err)
			}
			err = ValidateCreateInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("car", "create", err)
			}
			return nil, NewCreateInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("car", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "car" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*car.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("car", "get", "*car.GetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCarPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("car", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResponse returns a decoder for responses returned by the car get
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeGetResponse may return the following errors:
//   - "notFound" (type *goa.ServiceError): http.StatusNotFound
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("car", "get", err)
			}
			p := NewGetCarResourceOK(&body)
			view := "default"
			vres := &carviews.CarResource{Projected: p, View: view}
			if err = carviews.ValidateCarResource(vres); err != nil {
				return nil, goahttp.ErrValidationError("car", "get", err)
			}
			res := car.NewCarResource(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("car", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("car", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("car", "get", err)
			}
			err = ValidateGetInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("car", "get", err)
			}
			return nil, NewGetInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("car", "get", resp.StatusCode, string(body))
		}
	}
}

// unmarshalVinDataResponseBodyToCarviewsVinDataView builds a value of type
// *carviews.VinDataView from a value of type *VinDataResponseBody.
func unmarshalVinDataResponseBodyToCarviewsVinDataView(v *VinDataResponseBody) *carviews.VinDataView {
	res := &carviews.VinDataView{
		Country:       v.Country,
		Manufacturer:  v.Manufacturer,
		Brand:         v.Brand,
		EngineSize:    v.EngineSize,
		FuelType:      v.FuelType,
		Model:         v.Model,
		Year:          v.Year,
		AssemblyPlant: v.AssemblyPlant,
		SN:            v.SN,
	}
	vin := carviews.VinView(*v.Vin)
	res.Vin = &vin

	return res
}
