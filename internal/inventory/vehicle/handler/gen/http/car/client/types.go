// Code generated by goa v3.11.1, DO NOT EDIT.
//
// car HTTP client types
//
// Command:
// $ goa gen
// vehicle-sharing-go/internal/inventory/vehicle/infrastructure/controller/design
// -o internal/inventory/vehicle/infrastructure/controller

package client

import (
	goa "goa.design/goa/v3/pkg"

	"vehicle-sharing-go/internal/inventory/vehicle/handler/gen/car"
	carviews "vehicle-sharing-go/internal/inventory/vehicle/handler/gen/car/views"
)

// CreateRequestBody is the type of the "car" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Car id in uuid format
	ID  string `form:"id" json:"id" xml:"id"`
	Vin string `form:"vin" json:"vin" xml:"vin"`
	// Car color
	Color string `form:"color" json:"color" xml:"color"`
}

// GetOKResponseBody is the type of the "car" service "get" endpoint HTTP
// response body.
type GetOKResponseBody struct {
	ID        *string              `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	CreatedAt *string              `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	UpdatedAt *string              `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	Color     *string              `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
	VinData   *VinDataResponseBody `form:"vinData,omitempty" json:"vinData,omitempty" xml:"vinData,omitempty"`
}

// CreateConflictResponseBody is the type of the "car" service "create"
// endpoint HTTP response body for the "conflict" error.
type CreateConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateInternalResponseBody is the type of the "car" service "create"
// endpoint HTTP response body for the "internal" error.
type CreateInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetNotFoundResponseBody is the type of the "car" service "get" endpoint HTTP
// response body for the "notFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetInternalResponseBody is the type of the "car" service "get" endpoint HTTP
// response body for the "internal" error.
type GetInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// VinDataResponseBody is used to define fields on response body types.
type VinDataResponseBody struct {
	Vin           *string `form:"vin,omitempty" json:"vin,omitempty" xml:"vin,omitempty"`
	Country       *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Manufacturer  *string `form:"manufacturer,omitempty" json:"manufacturer,omitempty" xml:"manufacturer,omitempty"`
	Brand         *string `form:"brand,omitempty" json:"brand,omitempty" xml:"brand,omitempty"`
	EngineSize    *string `form:"engineSize,omitempty" json:"engineSize,omitempty" xml:"engineSize,omitempty"`
	FuelType      *string `form:"fuelType,omitempty" json:"fuelType,omitempty" xml:"fuelType,omitempty"`
	Model         *string `form:"model,omitempty" json:"model,omitempty" xml:"model,omitempty"`
	Year          *string `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
	AssemblyPlant *string `form:"assemblyPlant,omitempty" json:"assemblyPlant,omitempty" xml:"assemblyPlant,omitempty"`
	SN            *string `form:"SN,omitempty" json:"SN,omitempty" xml:"SN,omitempty"`
}

// GetBadRequestResponseBody is used to define fields on response body types.
type GetBadRequestResponseBody struct {
	ID        *string              `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	CreatedAt *string              `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	UpdatedAt *string              `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	Color     *string              `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
	VinData   *VinDataResponseBody `form:"vinData,omitempty" json:"vinData,omitempty" xml:"vinData,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "car" service.
func NewCreateRequestBody(p *car.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:    p.ID,
		Vin:   string(p.Vin),
		Color: p.Color,
	}
	return body
}

// NewCreateConflict builds a car service create endpoint conflict error.
func NewCreateConflict(body *CreateConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateInternal builds a car service create endpoint internal error.
func NewCreateInternal(body *CreateInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetCarResourceOK builds a "car" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetCarResourceOK(body *GetOKResponseBody) *carviews.CarResourceView {
	v := &carviews.CarResourceView{
		ID:        body.ID,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
		Color:     body.Color,
	}
	v.VinData = unmarshalVinDataResponseBodyToCarviewsVinDataView(body.VinData)

	return v
}

// NewGetNotFound builds a car service get endpoint notFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetInternal builds a car service get endpoint internal error.
func NewGetInternal(body *GetInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateConflictResponseBody runs the validations defined on
// create_conflict_response_body
func ValidateCreateConflictResponseBody(body *CreateConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateInternalResponseBody runs the validations defined on
// create_internal_response_body
func ValidateCreateInternalResponseBody(body *CreateInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_notFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetInternalResponseBody runs the validations defined on
// get_internal_response_body
func ValidateGetInternalResponseBody(body *GetInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateVinDataResponseBody runs the validations defined on
// vinDataResponseBody
func ValidateVinDataResponseBody(body *VinDataResponseBody) (err error) {
	if body.Vin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("vin", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on GetBad
// RequestResponseBody
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updatedAt", "body"))
	}
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.VinData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("vinData", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.VinData != nil {
		if err2 := ValidateVinDataResponseBody(body.VinData); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
